//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity >= 0.6.11;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract Verifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [12346015065897197076034196538833023447727420131897718647370174777755706359694,
             9945576476298593550680959706408540776516131305617444731527231056322781926890],
            [7517208161239983400121629337760975114679890871127419738833887074614866834765,
             14049070362559168954910584060117250345847945442715602734950208296027841536173]
        );
        vk.IC = new Pairing.G1Point[](109);
        
        vk.IC[0] = Pairing.G1Point( 
            5889107570930649286606758168287602254429091457699529686434342991570179364759,
            4420421834091796556202014526203952649233481200276844855092132235425142392853
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            5678561658726855510328235121658863528453239791024844257919250304696665625864,
            19226181070616105196358309310706525663409138186628305753017179930360525483996
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            20862870643842316449142452116362326175771824162069697662775457291827527743296,
            14500356483481346993586315642884262629962460510074278668473054731791772457473
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            14479867063436800641311884837791493657384639995768953660107167782347662390916,
            2268957586049549833979795065317654255743484464149782667246791742109002551407
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            21886545197724659506232040223085702167807011938143489037057647098759943164026,
            19246187394481869775189648050267351397034444766618613445747632475506311369856
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            3551587711159085824964139934436064646844461080780421149449556682138571267907,
            16564872689758874917312854340756991922531938115362424290830407704523591925175
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            6654209802811203662914785917556172782044843276392636033948479930635247432807,
            19540106292612857437508773518235571002183710904178310184718761419422309852060
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            17291980404164752402815909324334880363093365390506228349466544372505455862258,
            11855595444593152680277462417559212905599087305851022481011169893281600009121
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            16634251008288399988469852738038252490421464401946408295828041239791097717,
            10428749259512461437938776987220261553581186521832516733335924183209384824346
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            3937754940452965073988148006566487330129057795441838384247292704481798088612,
            3241406350911758594440339215232802660417342739778654826176124681301171014243
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            11218989052250691417052564875088023505869054498014995763900182218049401298337,
            1593649891060509950763232096088011428018899428221273265860479129209092681211
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            10175570731556086335865444331911534658175546352308802906639203114664041083659,
            21705938824678766497188386897282788792239542910534218705239923878190497304250
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            14291507400707019039415985883666794602364242787303699478510435606806946830536,
            1858246040143739102905520744372110187783858802207366543256773078377892521838
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            13692786243365815921027238191819524169231172230131322338361325804243737611412,
            17220734439660214549879490852280716471376158377905193609919372642424147562851
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            5965634989659981299412474964599004737095751108796690028896685059560594619713,
            19342670743310480724997613599528889149339627007791307942675746501909958566146
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            10918728004860580951727295438635214576201989739669052634843948698987433358734,
            5985138921947095343307202219642528420112548777056133351662107619894637550390
        );                                      
        
        vk.IC[16] = Pairing.G1Point( 
            17075896598770648780859299953051311030227378010851842838732637133783172683801,
            15820046608272563700424784646923976869999211508577626102789721833336921078983
        );                                      
        
        vk.IC[17] = Pairing.G1Point( 
            5985528285159124647827800915157037839113466346197359786812678985476275485226,
            11456888614503131217684165899744762046646779274000375384521771671144221381659
        );                                      
        
        vk.IC[18] = Pairing.G1Point( 
            2223776354210128292338129261128496563478348283695946732175776293195168398275,
            21586144941056700792331041708372620719445656144881680182550722230252263060785
        );                                      
        
        vk.IC[19] = Pairing.G1Point( 
            7323537013477100396292866778604430178224624896852002378459855615951965909233,
            2017294417743109642787316830857888936161995005468992799269372037045528857664
        );                                      
        
        vk.IC[20] = Pairing.G1Point( 
            4418049288112498908696759485843556010876543396194837098042384071090094243454,
            10639557614919932025109003376608627009231851039866894879380984256860284566537
        );                                      
        
        vk.IC[21] = Pairing.G1Point( 
            2659805202103696658590817653100868657373938086838123646424021567527539499508,
            12054336629460343598341747365293816941771888654248850136174787125482848903187
        );                                      
        
        vk.IC[22] = Pairing.G1Point( 
            1107459953084531822023983277987874816963996714597908749907130877916034038217,
            16800975456171153494358885110322985543924344253403744060202547720922539900326
        );                                      
        
        vk.IC[23] = Pairing.G1Point( 
            8253166439331495637138126649265823323237655735551414398545948050894867338409,
            1423791760839910945415166281089902434263684725293002692213599290929218502028
        );                                      
        
        vk.IC[24] = Pairing.G1Point( 
            1791644511455844849240037679307440435898051442376359932092338654036557660584,
            17426734393967194207800420913342195537743760290961284289483749364411272523854
        );                                      
        
        vk.IC[25] = Pairing.G1Point( 
            5788487481808525560187991420802255154686050508482377762484614439861276111300,
            18692233967055956262343156287082434546333908260547742989434153854313399558614
        );                                      
        
        vk.IC[26] = Pairing.G1Point( 
            1242803417608854879304183577356924576449400050770771437591432826589804810224,
            19039564780241359695669934130867064779781213814368785409381296010876280083323
        );                                      
        
        vk.IC[27] = Pairing.G1Point( 
            4001197657980782365901915543593834349347055978384004834309816911237304764969,
            733568250478910081765890621178237367453086766497218357119737824247510982466
        );                                      
        
        vk.IC[28] = Pairing.G1Point( 
            21224938093955069523236391289666102281603191816003857044266686258383284667419,
            8795720522593929452269290250627061328493833609085183925371853604397349891082
        );                                      
        
        vk.IC[29] = Pairing.G1Point( 
            12347868935404639813184848167991516324973691090642771826455661787879898856856,
            8825535110943808122703287395438091214188644279496270636785814179010932812672
        );                                      
        
        vk.IC[30] = Pairing.G1Point( 
            19169188158547785412727460598718269482228078966185341162805456459018988808297,
            10063637955051622116426195982293599170844268829868691591473059691625826215532
        );                                      
        
        vk.IC[31] = Pairing.G1Point( 
            4247901110546559430723520008447021418951117624609984344959109814188888408769,
            390728622272397582576209920745197944193760594283906620169953140168772608831
        );                                      
        
        vk.IC[32] = Pairing.G1Point( 
            4996839458873128518189525143991032768553048012764616622423484470441592746728,
            16310450939608943875903475216668121684717452613929423134728724137218875922779
        );                                      
        
        vk.IC[33] = Pairing.G1Point( 
            3048205851860374725279374237831309802430909482088090469720106904941304071867,
            12625108361237976864244057538228305942572395432038445898403059987401935355083
        );                                      
        
        vk.IC[34] = Pairing.G1Point( 
            16275673094218454512953837636409837522484790040127433432184901383199462949717,
            12496159713065534692844096419340870867462696414335012095811782016735675034955
        );                                      
        
        vk.IC[35] = Pairing.G1Point( 
            5690008234702723051677961626047758040693332393478532943211823305029126142635,
            20611439497883585846021216715717720605742278404341110692387084936228277113529
        );                                      
        
        vk.IC[36] = Pairing.G1Point( 
            9277045382099357143290684360198438348262984115730729989044449317155932343254,
            2603165205422750909152734792692828259849206760442442440161286054824134874564
        );                                      
        
        vk.IC[37] = Pairing.G1Point( 
            21044508595335492096636927929695586205924722771274660056557012652962872564833,
            7006914816331437726791190796316186374320088253922540378632096097781388954859
        );                                      
        
        vk.IC[38] = Pairing.G1Point( 
            6509252033596333279875400196120855936893031095589206403580952501676209001619,
            6295349058037211400643195852220935773226073436948155478904837736487646538666
        );                                      
        
        vk.IC[39] = Pairing.G1Point( 
            1198159176018655503842514605500519180058179943539711317312550723372993206838,
            13864824529200617266325283858298453430212916957227257630344984599571490369964
        );                                      
        
        vk.IC[40] = Pairing.G1Point( 
            6476585103912008191881721215761172920697243221168833707242282180624237963454,
            18939753076687163695147559435432048562852533542714216854145506943525067138763
        );                                      
        
        vk.IC[41] = Pairing.G1Point( 
            9546474535926699853759178320586541124218687310379507964217565261715637657502,
            3657026589775510204397996010931740255256522526839905482790639577783112208273
        );                                      
        
        vk.IC[42] = Pairing.G1Point( 
            16757475041982471340621279125921639050462385559608885492491106741203469502418,
            6712580201759612043158600530156028046878585708007209794263905209537053386871
        );                                      
        
        vk.IC[43] = Pairing.G1Point( 
            5644771525456403025053487295826201859044301099044206413634092893887265117551,
            4966089190909059250882586687534058440802189584632916705688754396570551985875
        );                                      
        
        vk.IC[44] = Pairing.G1Point( 
            11665926467817136346656385470003097404765556916848160666859098805040248503626,
            11091095891404446049288261265282902099433160114477029191803232115472071691669
        );                                      
        
        vk.IC[45] = Pairing.G1Point( 
            7824332623365561037233543126645913578869744279132645365451256837183426966450,
            18940154077265126858290626963950941017869730282217765410503307968659076975424
        );                                      
        
        vk.IC[46] = Pairing.G1Point( 
            16106316919874706230615999580911146721400707634990704430116319121284022668964,
            15525691777137867356302506216848805753629272837795752722086843216178600835222
        );                                      
        
        vk.IC[47] = Pairing.G1Point( 
            20829976456763879444249478743442598313743200325358946081152096253234057613653,
            20640533916524946958895394733567092282390867611271124270868797337415497057807
        );                                      
        
        vk.IC[48] = Pairing.G1Point( 
            9300503590557632480948780550619475751965904567120652649116486739493652191315,
            14801648481579492663199211314860104375545487845379484248820673218870771033952
        );                                      
        
        vk.IC[49] = Pairing.G1Point( 
            5541953140955441715749356033481701253586686785667793275158160436940962618605,
            3616958319159895702398307380413423106409877623120793107122872604869253655740
        );                                      
        
        vk.IC[50] = Pairing.G1Point( 
            7033935086197682815781041894057197753022052431919096770458542988819955517648,
            10433530437747597898112332460175086587361789848665463736170567955128733801986
        );                                      
        
        vk.IC[51] = Pairing.G1Point( 
            11470326910101917441849750670372685706375867121568070080648831993125801586100,
            10380125061317279740291148991604700398444858760462852708520929879091967223805
        );                                      
        
        vk.IC[52] = Pairing.G1Point( 
            19681165385094635199137304994217549048699446199801946001011466015071030856027,
            5362748243059677598956260047845971748775100295370353775599669438177964185344
        );                                      
        
        vk.IC[53] = Pairing.G1Point( 
            7182795306763163671936721180446420919967609134264130070963131341974891937457,
            3417641595815046095724206018963347983229523987645711800010564166179569742793
        );                                      
        
        vk.IC[54] = Pairing.G1Point( 
            4851353316175840514930284807569953178906178797457817488458376115749401018528,
            2953922049415737155438257070332318141825149989696893375483863975764846949140
        );                                      
        
        vk.IC[55] = Pairing.G1Point( 
            17253901403855619722407546496000975700899563497611967096525266472181367684298,
            18240584475189541516163955617417154634689069894189116152990336485674459102544
        );                                      
        
        vk.IC[56] = Pairing.G1Point( 
            19958728524273066248320740332611455139769857872513529109845437811473684660589,
            14979014283006545390819650815096376472355472507240861912607246675029680734784
        );                                      
        
        vk.IC[57] = Pairing.G1Point( 
            4155674704261597812360229249685196011747800266047197512011328093548119505960,
            19334583886602224237573776345809758460127064514071153490236093800346421321384
        );                                      
        
        vk.IC[58] = Pairing.G1Point( 
            21151642311502518616073276597083390368597617675943373394472431975601173947546,
            6740997855614810000553253543095945958635958113282487068603396841623494905445
        );                                      
        
        vk.IC[59] = Pairing.G1Point( 
            3576693249879915259565481733004180749885302611972153853015692844732930634831,
            2538385526149354354401562714697581301052031193895476962368813646158722156321
        );                                      
        
        vk.IC[60] = Pairing.G1Point( 
            7995890096930229963179168795825910697966478543100212665981869279425342200259,
            17139289528315282944329608465045732193333033161754919417587510053652147586969
        );                                      
        
        vk.IC[61] = Pairing.G1Point( 
            17460939436756505128235206053284857960033600475009587797026208293073971568984,
            9706658256008395969492334830655525916875473508615358545862965453930438437867
        );                                      
        
        vk.IC[62] = Pairing.G1Point( 
            9161107193611352853218194687548681889081993494357400161832960139345022762747,
            12612893439649139874735500256577281853660152388952619938332811527100120995373
        );                                      
        
        vk.IC[63] = Pairing.G1Point( 
            7965058196022667507873153714218025670119155369485671274076496602051046775532,
            21726305661076956288523113980561667179973237727512097022822907602348218064386
        );                                      
        
        vk.IC[64] = Pairing.G1Point( 
            7917862083042813697018827494995672104212826433719770200765359707965656082512,
            20566969363579161207905096165090367366149213726499158050883005735833578714808
        );                                      
        
        vk.IC[65] = Pairing.G1Point( 
            16934282976579273581042291120811491443023789066465945544670476426701726672225,
            6863673159045900459873036511383249412822573686287097010323701334983824689147
        );                                      
        
        vk.IC[66] = Pairing.G1Point( 
            1661861830626579872367460256119727081421467254751047725884122388145624191420,
            21135844446116132733513992173572419689769961192300655973016641508500789738379
        );                                      
        
        vk.IC[67] = Pairing.G1Point( 
            2394290260406145435418601458409533704931839359872851954026484786359436777217,
            21828002579724054781147600113011405483360947307802468185628419589980152417953
        );                                      
        
        vk.IC[68] = Pairing.G1Point( 
            9135379931447424711783134790788270024808113269516276289619478065363075840115,
            4629431699633716855573126755986786346944219311348335558781482296820861826858
        );                                      
        
        vk.IC[69] = Pairing.G1Point( 
            9934880116671701065425516336678247517648763511613429979665725634529350543112,
            11257619363431668226724633262679558274899440411878189839370867987749172863904
        );                                      
        
        vk.IC[70] = Pairing.G1Point( 
            17868389016113481091470403285691328496787439188141691292505379400562684411020,
            10507760384518217625925146103368838447867829123121900617905030297638220556970
        );                                      
        
        vk.IC[71] = Pairing.G1Point( 
            16568930666181882353937486806171103060165520398285932655479227384865175768394,
            9938157687168635819023532819285847855057899832656964898990954979073752252281
        );                                      
        
        vk.IC[72] = Pairing.G1Point( 
            14436847022870615865429996598809721826848193414962256950242351710208158352826,
            5509077384226127452367385758773227689015705210574470179012951819036106137886
        );                                      
        
        vk.IC[73] = Pairing.G1Point( 
            19868276888541002019434242890860727031910077005968117670056013441126547213591,
            1476253664883479632704283046963388060341368983361985764506625297565956093002
        );                                      
        
        vk.IC[74] = Pairing.G1Point( 
            3624157701778213692729591189943742670274411393606151834093613889598120122640,
            17364455126514930612154036668192478225142295930559663752965062155271574496038
        );                                      
        
        vk.IC[75] = Pairing.G1Point( 
            1078847573527538686626337001998039541222346648833680360702562791771702998241,
            17210076345633423712053132582947429901017537045529473506502914197208050828645
        );                                      
        
        vk.IC[76] = Pairing.G1Point( 
            18877091087084888183874057863696126245287711080677515005881484784590463868232,
            10715025437276181024335407700802186374875133149620374174409699977906093474051
        );                                      
        
        vk.IC[77] = Pairing.G1Point( 
            19568151853345998202928720379523971325696713974788454759161313534014977399583,
            13023769543489379107724373420385829065116988876697974107865088240957126787529
        );                                      
        
        vk.IC[78] = Pairing.G1Point( 
            14767561719929932728080091379197492435578704966028523974711937826938246325661,
            16872254717189167136265846533651783047554407085726923568353893698178490013965
        );                                      
        
        vk.IC[79] = Pairing.G1Point( 
            5833747378012370775677035456529692815509586742746589985272100995488887522765,
            18008477675728333593197674920150657936327919697711742069510701733936920389716
        );                                      
        
        vk.IC[80] = Pairing.G1Point( 
            12137744871855293974355949109832177104461853408065407358492513065728857689364,
            4120359994020416949579302776033576048971514399434731965274884854417707887551
        );                                      
        
        vk.IC[81] = Pairing.G1Point( 
            11253551745951543160886178336705051740451607578364244123531794937652403049869,
            14410906551906490713089436039965313851299043751995531084623132025139365562591
        );                                      
        
        vk.IC[82] = Pairing.G1Point( 
            20844587685130938744519056413730006803239418782848867393391677035890237286184,
            14220463549562439098534706625149785820006795848643007915323089810329446530150
        );                                      
        
        vk.IC[83] = Pairing.G1Point( 
            4368852878602839669920305602576752973920850814443294454483714766084393725254,
            17353235507927611103050439163186247149763492114875977094259297869548548607441
        );                                      
        
        vk.IC[84] = Pairing.G1Point( 
            1181565263771750159152009339737479658159283920107714053543042015048723703981,
            18217161620263894581996852413829838291335325064273077150608217661892182994990
        );                                      
        
        vk.IC[85] = Pairing.G1Point( 
            9183361518944699564373063950582843806750072030398954600644840155071630002485,
            286017697236860110014582021532654158142573095522666468906040241124130369268
        );                                      
        
        vk.IC[86] = Pairing.G1Point( 
            10509715993197636943322942400317222739802683276788853726582292554744341113195,
            19733378890502214122071939860063812421113733912767118780952946116776921568517
        );                                      
        
        vk.IC[87] = Pairing.G1Point( 
            8795117654438626048077626631253504278972479145045382594761923754275344434444,
            7277584194322940660875460514497554330701497237722969138738995418766462666053
        );                                      
        
        vk.IC[88] = Pairing.G1Point( 
            9639855368799327582044615717326349961058001701943000443053353591519767345538,
            17537553220286071861463006571887220942106661749879118961593109919755975283149
        );                                      
        
        vk.IC[89] = Pairing.G1Point( 
            14235183702794444802892359052372766120731120450262560580489914313729910366503,
            1526034657137348056004925247928852574394851287172304747640818047828879031488
        );                                      
        
        vk.IC[90] = Pairing.G1Point( 
            20844334061380975466143618506288792586142946521525747265916020211732568313374,
            15857718711370491202122765885365434543545417094167351649199830025362572855463
        );                                      
        
        vk.IC[91] = Pairing.G1Point( 
            12811078360109787691668180138763879838408235432387326646561632822554538618866,
            18837161248742419971088787874482727132660408925879583039926506797890924853952
        );                                      
        
        vk.IC[92] = Pairing.G1Point( 
            6536205714098238422650750445868289107977308878516111378557725452264415718586,
            3260312969236484608999106962374927487756577012657262974807409682040795719902
        );                                      
        
        vk.IC[93] = Pairing.G1Point( 
            8901843876658732643289197768443732234495263412353984864570316095609915101498,
            21525461857321545382991469732714694843420635096697831044670482376803564142917
        );                                      
        
        vk.IC[94] = Pairing.G1Point( 
            10616395468477839989780750867988994381906859414718281273577491503969824277159,
            12862323881500028958383201690968256697317563659982068279014327482747516639121
        );                                      
        
        vk.IC[95] = Pairing.G1Point( 
            11098002310282979455482968257173914463369794224837603394974806879873825339599,
            16033387910797829966215371693754213848667858280778799143875508080856244199307
        );                                      
        
        vk.IC[96] = Pairing.G1Point( 
            16601421667835807650604566538878001094436628909099828412903546763065577683078,
            10271448136003435140223311315758634206305362064641547539051842071562405240962
        );                                      
        
        vk.IC[97] = Pairing.G1Point( 
            11316258858036529170900296951802748123261750218270026319944936122236884423456,
            7143294644383799495760520793628948573713867780649404324500185281022802267646
        );                                      
        
        vk.IC[98] = Pairing.G1Point( 
            8634544253561857283009081794625664834667719475889960200150924053086859959050,
            8016701203932187727003530725238520105363110460604998370305427766913111233697
        );                                      
        
        vk.IC[99] = Pairing.G1Point( 
            1880326677391530828394419948799265340331823970902751917054665134601759561769,
            20709941904724324828365585655732954307565914341459907427169727628231630798777
        );                                      
        
        vk.IC[100] = Pairing.G1Point( 
            18581219576899564600101729577874894120049548243037915327365162012761986692006,
            9287784352358141757096442308001395866912278621386322112234450115291001534528
        );                                      
        
        vk.IC[101] = Pairing.G1Point( 
            19595636043203024220120653582964937745530325310231154244736048152106788883835,
            20497332326999342712313776757473555438614251163924346960721190281579639291219
        );                                      
        
        vk.IC[102] = Pairing.G1Point( 
            16852786115424296678332710426427737705831754590353718621150297024943159746134,
            19173592140257945485071532205830461010684115198580303835226285833849799459546
        );                                      
        
        vk.IC[103] = Pairing.G1Point( 
            3287523286421384820609324573063191170580972580548563605195597371042211290229,
            15315120946890366908624780508514600278470425288457440886281433137660787344810
        );                                      
        
        vk.IC[104] = Pairing.G1Point( 
            10063673077604013244413834360563906269714910889677556836110048461580289465582,
            19202059808508963451034639297565752246541079237289958682345427607109789912688
        );                                      
        
        vk.IC[105] = Pairing.G1Point( 
            1404807769033198934995514549772528840189322128721145634887549254354056058707,
            11414976248401543379844100257119969508427795148048957004103866004211597864166
        );                                      
        
        vk.IC[106] = Pairing.G1Point( 
            16414603128886803435649600966599366372924444296489742289658887133614989483548,
            12206650077446796379776767895608486804351543941441586139534604420652417623720
        );                                      
        
        vk.IC[107] = Pairing.G1Point( 
            8363350793391294704920111623022462404430782757572766297456804183109215153225,
            19611231576683280643115219335704706744775400923740482814997534381490478586678
        );                                      
        
        vk.IC[108] = Pairing.G1Point( 
            9061960992530123989855343393845596338459924715573794669294572980955711689019,
            17875674592332644618195404344049290102077072718568639267006467919298270813494
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
